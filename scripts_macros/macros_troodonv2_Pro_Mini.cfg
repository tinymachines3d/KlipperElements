#####################################################################
#   Printer Macros
#####################################################################
[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x     : 125   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y     : 250   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract    : 1.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract     : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop         : 15.0  ; z move speed in mm/s
variable_speed_move        : 100.0 ; move speed in mm/s
variable_park_at_cancel    : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
gcode:

[gcode_macro BELT_TENSION_XY]
gcode:
    G32
    CENTER
    G0 Y110
    G1 Z128

[gcode_macro BELT_TENSION_Z]
gcode:
    G32
    CENTER
    G1 Z128

[gcode_macro Z_OFFSET_CALIBRATE]
gcode:
    {% set bedtemp = params.BED|int %}
    M109 S150
    M190 S{bedtemp}
    PROBE_CALIBRATE

[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    SAVE_GCODE_STATE NAME=STATE_ZCAL
    G32
    NOZZLE_WIPE    
    CENTER
    _STATUS_CALIBRATING_Z
    _PROBE_CALIBRATE { rawparams }
    RESTORE_GCODE_STATE NAME=STATE_ZCAL

[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F7200
    
[gcode_macro G28]
rename_existing: G28.1
gcode:
    SAVE_GCODE_STATE NAME=STATE_G28
    _STATUS_HOMING
    G28.1 { rawparams }
    RESTORE_GCODE_STATE NAME=STATE_G28

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    QUAD_GANTRY_LEVEL
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    _STATUS_LEVELING
    _QUAD_GANTRY_LEVEL { rawparams }
    G28
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro BUILD_BED_MESH]
gcode:
    {% if 'PROBE_COUNT' in params|upper %}
        {% set get_count = ('PROBE_COUNT=' + params.PROBE_COUNT) %}
    {%else %}
        {% set get_count = "" %}
    {% endif %}
    {% if not params.BED is defined %}
        RESPOND MSG="You must enter a bed temperature to run this macro."
    {% else %}
        SAVE_GCODE_STATE NAME=STATE_MESH
        {% set bedtemp = params.BED|default(0)|int %}
        BED_MESH_CLEAR
        {% if printer.toolhead.homed_axes != "xyz" %}
            G28
        {% endif %}
        M104 S150 
        M109 S150
        M190 S{bedtemp}
        QUAD_GANTRY_LEVEL
        _STATUS_MESHING
        BED_MESH_CALIBRATE {get_count} PROFILE={bedtemp}
        BED_MESH_PROFILE SAVE={bedtemp}
        RESTORE_GCODE_STATE NAME=STATE_MESH
        SAVE_CONFIG
    {% endif %}  

#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
[gcode_macro PRINT_START]
gcode:
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
#Homing procedure 
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    M190 S{bedtemp}
    M109 S{150}
    G32
    G90
    G28 Z
    G0 X250 Y250 Z50 F8000
    #SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber TARGET={chambertemp}
    M104 S{hotendtemp}
    M109 S{hotendtemp}
    NOZZLE_WIPE
    BED_MESH_PROFILE LOAD={bedtemp}
    _STATUS_PRINTING
   
[gcode_macro PRIME_NOZZLE]
gcode:
#prime the nozzle
   G90
   G0 X0 Y8 Z50 F6000
   G92 E0;
   G90
   G0 X2 Y8 F6000
   G0 Z0.4
   G91
   G1 X120 E30 F1200;
   G1 Y0.4
   G1 X-120 E30 F1200;
   G92 E0;
   G90

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    _STATUS_PART_READY

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    G91
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}
    M117 Unloading filament...
    # Extract filament to cold end area 
    G0 E-5 F3600
    # Wait for three seconds
    G4 P3000
    # Push back the filament to smash any stringing 
    G0 E5 F3600
    # Extract back fast in to the cold zone 
    G0 E-15 F3600
    # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
    G0 E-135 F300
    M400e
    M117 Filament unloaded!
    RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
    SAVE_GCODE_STATE NAME=load_state
    G91
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}
    M117 Loading filament...
    # Load the filament into the hotend area.
    G4 P5000
    G0 E80 F600
    # Wait a secod
    G4 P1000
    # Purge
    G0 E25 F100
    # Wait for purge to complete
    M400e
    M117 Filament loaded!
    RESPOND MSG="Filament loaded!"
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro NOZZLE_WIPE]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    G90
    _STATUS_CLEANING
    G1 X95 Y250 F6000
    G1 Z0.8 F3000
    G1 X145 Y250 F10000
    G1 X95 Y250 F10000
    G1 X145 Y250 F10000
    G1 X95 Y250 F10000
    G1 X145 Y250 F10000
    G1 X95 Y250 F10000
    

[gcode_macro EXTRUDER_CALIBRATION]
gcode:
    M117 hotend will be heated
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=260
    M109 S260
    G91
    G1 E100 F100
    G90

[gcode_macro DISABLE_XY]
gcode:	
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0	

[gcode_macro LIGHT_ON]
gcode:    
    SET_PIN PIN=caselight VALUE=1.00

[gcode_macro LIGHT_OFF]
gcode:
    SET_PIN PIN=caselight VALUE=0.00

[gcode_macro LIGHTS_OFF]
gcode:
    SET_PIN PIN=caselight VALUE=0.00

# [gcode_macro LIGHTS_OFF_ALL]
# gcode:
#     _STOP_LED_EFFECTS
#     SET_PIN PIN=caselight VALUE=0.00

[gcode_macro CLEAR_MESSAGE]
gcode:
    M117
##################################################################


#####################################################################
#   Filament Runout Sensor
#####################################################################

[filament_switch_sensor filament_e0]
pause_on_runout: False
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
runout_gcode:
  M600
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
switch_pin: PC14
#   The pin on which the switch is connected. This parameter must be
#   provided

#####
# COLOR CHANGE
#####
[gcode_macro M600]
description: Executes a color change by pausing the printer an unloading the filament.
gcode:
  PAUSE
  UNLOAD_FILAMENT
  M117 Please load new filament and resume
  RESPOND MSG="Please load new filament and resume"

[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".


#################
# Status LEDs
# This enables stealthburner-led status macros to be used if they exist.
# https://github.com/VoronDesign/Voron-Afterburner/blob/sb-beta/Klipper_Macros/stealthburner_leds.cfg
[gcode_macro _stop_led_effects]
gcode:
    {% if printer['gcode_macro stop_led_effects'] is defined %}
        STOP_LED_EFFECTS
    {% endif %}

[gcode_macro _status_ready]
gcode:
    {% if printer['gcode_macro status_ready'] is defined %}
        STATUS_READY
    {% endif %}

[gcode_macro _status_busy]
gcode:
    {% if printer['gcode_macro status_busy'] is defined %}
        STATUS_BUSY
    {% endif %}

[gcode_macro _status_leveling]
gcode:
    {% if printer['gcode_macro status_leveling'] is defined %}
        STATUS_LEVELING
    {% endif %}

[gcode_macro _status_homing]
gcode:
    {% if printer['gcode_macro status_homing'] is defined %}
        STATUS_HOMING
    {% endif %}

[gcode_macro _status_cleaning]
gcode:
    {% if printer['gcode_macro status_cleaning'] is defined %}
        STATUS_CLEANING
    {% endif %}

[gcode_macro _status_meshing]
gcode:
    {% if printer['gcode_macro status_meshing'] is defined %}
        STATUS_MESHING
    {% endif %}

[gcode_macro _status_calibrating_z]
gcode:
    {% if printer['gcode_macro status_calibrating_z'] is defined %}
        STATUS_CALIBRATING_Z
    {% endif %}

[gcode_macro _status_printing]
gcode:
    {% if printer['gcode_macro status_printing'] is defined %}
        STATUS_CALIBRATING_Z
    {% endif %}

[gcode_macro _status_part_ready]
gcode:
    {% if printer['gcode_macro status_part_ready'] is defined %}
        STATUS_PART_READY
    {% endif %}

[gcode_macro _lights_off_all]
gcode:
    {% if printer['gcode_macro lights_off_all'] is defined %}
        LIGHTS_OFF_ALL
    {% endif %}

    

#####################################################################
# Enable object exclusion
[exclude_object]

[gcode_arcs]
resolution: 0.1

[gcode_macro M201]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
      SET_VELOCITY_LIMIT ACCEL={accel}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M203]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY={speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M205]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set corner_speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner_speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}