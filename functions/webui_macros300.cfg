[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 150.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 300.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                    Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
gcode:

[virtual_sdcard]
path: /home/pi/gcode_files

[pause_resume]

[display_status]

[respond]
default_type: echo

[delayed_gcode clear_display]
gcode:
  M117 # clear display message


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  PRINT_END
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  CANCEL_PRINT_BASE


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  DISABLE_XY
  _TOOLHEAD_PARK_PAUSE_CANCEL

[delayed_gcode clear_display]
gcode:
  M117 # clear display message

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% if not printer.pause_resume.is_paused %}
    M117 RESUME ignored..Pressed multiple times or the printer is not paused.
    M118 RESUME ignored..Pressed multiple times or the printer is not paused.
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
  {% else %}
    G28 X
    G28 Y
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
  {% endif %}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_minimum.x|float + 2.0 %}
  {% set y_park = printer.toolhead.axis_minimum.y|float + 2.0 %}
  {% set z_park_delta = 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script â€“ please customize for your slicer of choice
gcode:
     # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
#Homing procedure 
    G28
    G90
    G0 X5 Y0 Z50 F6000
    M104 S{hotendtemp}
    M190 S{bedtemp}
    M109 S{hotendtemp}
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber TARGET={chambertemp}
    G32
    BED_MESH_PROFILE LOAD={bedtemp}
    LIGHTS_ON


[gcode_macro PRIME_NOZZLE]
gcode:
#prime the nozzle
    G90
    G0 X0 Y0 Z50 F6000
    G92 E0;
    G90
    G0 X5 Y5 F6000
    G0 Z0.4
    G91
    G1 X120 E30 F1200;
    G1 Y1
    G1 X-120 E30 F1200;
    G92 E0;
    G90


[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	
	
[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Unloading filament...
  # Extract filament to cold end area 
  G0 E-5 F3600
  # Wait for three seconds
  G4 P3000
  # Push back the filament to smash any stringing 
  G0 E5 F3600
  # Extract back fast in to the cold zone 
  G0 E-15 F3600
  # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
  G0 E-130 F300
  M400e
  M117 Filament unloaded!
  RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
  RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Loading filament...
  # Load the filament into the hotend area.
  G0 E100 F600
  # Wait a secod
  G4 P1000
  # Purge
  G0 E40 F100
  # Wait for purge to complete
  M400e
  M117 Filament loaded!
  RESPOND MSG="Filament loaded!"
  RESTORE_GCODE_STATE NAME=load_state


[idle_timeout]
gcode:
    LIGHTS_OFF
    M84
    TURN_OFF_HEATERS
timeout: 1800
 

[gcode_macro BUILD_BED_MESH]
gcode:
    {% if 'PROBE_COUNT' in params|upper %}
        {% set get_count = ('PROBE_COUNT=' + params.PROBE_COUNT) %}
    {%else %}
        {% set get_count = "" %}
    {% endif %}
    {% if not params.BED is defined %}
        RESPOND MSG="You must enter a bed temperature to run this macro."
    {% else %}
        SAVE_GCODE_STATE NAME=STATE_MESH
        {% set bedtemp = params.BED|default(0)|int %}
        BED_MESH_CLEAR
        {% if printer.toolhead.homed_axes != "xyz" %}
            G28
        {% endif %}
        M190 S{bedtemp}
        QUAD_GANTRY_LEVEL
        _STATUS_MESHING
        BED_MESH_CALIBRATE {get_count} PROFILE={bedtemp}
        BED_MESH_PROFILE SAVE={bedtemp}
        RESTORE_GCODE_STATE NAME=STATE_MESH
        SAVE_CONFIG
    {% endif %}   


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X150 Y150 Z20 F18000 


[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    _STATUS_LEVELING
    _QUAD_GANTRY_LEVEL { rawparams }
    G28
    RESTORE_GCODE_STATE NAME=STATE_G32


[gcode_macro BELT_TENSION_XY]
gcode:
    G32
    G1 X150 Y107.5 F3600
    G1 Z150

[gcode_macro BELT_TENSION_Z]
gcode:
    G32
    G1 X150 Y150 F3600
    G1 Z312
 
	
[gcode_macro DISABLE_XY]
gcode:	
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0	

	
[gcode_macro EXTRUDER_CALIBRATION]
gcode:
  M117 hotend will be heated
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=260
  M109 S260
  G91
  G1 E100 F100
  G90
  

[gcode_macro M600]
description: Executes a color change by pausing the printer an unloading the filament.
gcode:
  PAUSE
  UNLOAD_FILAMENT
  M117 Please load new filament and resume
  RESPOND MSG="Please load new filament and resume"


[gcode_macro LIGHTS_OFF]
gcode:    
    SET_LED LED=lights RED=0 GREEN=0 BLUE=0
    

[gcode_macro LIGHTS_ON]
gcode:    
    SET_LED LED=lights RED=1 GREEN=1 BLUE=1
    

#################
# Status LEDs
# This enables stealthburner-led status macros to be used if they exist.
# https://github.com/VoronDesign/Voron-Afterburner/blob/sb-beta/Klipper_Macros/stealthburner_leds.cfg
[gcode_macro _stop_led_effects]
gcode:
    {% if printer['gcode_macro stop_led_effects'] is defined %}
        STOP_LED_EFFECTS
    {% endif %}

[gcode_macro _status_ready]
gcode:
    {% if printer['gcode_macro status_ready'] is defined %}
        STATUS_READY
    {% endif %}

[gcode_macro _status_busy]
gcode:
    {% if printer['gcode_macro status_busy'] is defined %}
        STATUS_BUSY
    {% endif %}

[gcode_macro _status_leveling]
gcode:
    {% if printer['gcode_macro status_leveling'] is defined %}
        STATUS_LEVELING
    {% endif %}

[gcode_macro _status_homing]
gcode:
    {% if printer['gcode_macro status_homing'] is defined %}
        STATUS_HOMING
    {% endif %}

[gcode_macro _status_cleaning]
gcode:
    {% if printer['gcode_macro status_cleaning'] is defined %}
        STATUS_CLEANING
    {% endif %}

[gcode_macro _status_meshing]
gcode:
    {% if printer['gcode_macro status_meshing'] is defined %}
        STATUS_MESHING
    {% endif %}

[gcode_macro _status_calibrating_z]
gcode:
    {% if printer['gcode_macro status_calibrating_z'] is defined %}
        STATUS_CALIBRATING_Z
    {% endif %}

[gcode_macro _status_printing]
gcode:
    {% if printer['gcode_macro status_printing'] is defined %}
        STATUS_CALIBRATING_Z
    {% endif %}

[gcode_macro _status_part_ready]
gcode:
    {% if printer['gcode_macro status_part_ready'] is defined %}
        STATUS_PART_READY
    {% endif %}


[gcode_macro PartyTime]
gcode:
	SET_LED LED=lights RED=0 GREEN=1 BLUE=0
	SET_LED LED=lights RED=0 GREEN=0 BLUE=1
        SET_LED LED=lights RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=lights RED=1 GREEN=0 BLUE=0 INDEX=1
	G4 P250                       ; sleep 250ms                    
	SET_LED LED=lights RED=0 GREEN=1 BLUE=0
	SET_LED LED=lights RED=0 GREEN=0 BLUE=1
        SET_LED LED=lights RED=0 GREEN=1 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=lights RED=0 GREEN=1 BLUE=0 INDEX=1

[gcode_macro SIREN]
gcode:
	SET_LED LED=lights RED=1 GREEN=0 BLUE=0
	SET_LED LED=lights RED=0 GREEN=0 BLUE=1
        SET_LED LED=lights RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=lights RED=1 GREEN=0 BLUE=0 INDEX=1
	G4 P250                       ; sleep 250ms                    
	SET_LED LED=lights RED=1 GREEN=0 BLUE=0
	SET_LED LED=lights RED=0 GREEN=0 BLUE=1
        SET_LED LED=lights RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=lights RED=1 GREEN=0 BLUE=0 INDEX=1

#####################################################################
# Enable object exclusion
[exclude_object]

[gcode_arcs]
resolution: 0.1

[gcode_macro M201]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
      SET_VELOCITY_LIMIT ACCEL={accel}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M203]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY={speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M205]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set corner_speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner_speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}